openapi: 3.0.1
info:
  title: COSN API Gateway
  version: 1.0.0
servers:
  - url: https://cosn-api-gateway.herokuapp.com
    description: Heroku server url
  - url: https://cosn-health-checking.herokuapp.com
    description: Health check server url
  - url: https://cosn-log-aggregation.herokuapp.com
    description: Log Aggregation Service for the COSN system
  - url: http://localhost:8080
    description: Localhost server url
paths:
  /runVisualization:
    post:
      tags:
        - Visualization Service
      operationId: runVisualization
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisualizationRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /register:
    post:
      tags:
        - Authentication
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /login:
    post:
      tags:
        - Authentication
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /getUserFromToken:
    post:
      tags:
        - Authentication
      operationId: getUserFromToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFromTokenRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /executeOrder:
    post:
      tags:
        - MAS Service
      operationId: executeOrder
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /changeUserRole:
    post:
      tags:
        - Roles Managment
      operationId: changeUserRole
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleChangeRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /roles:
    get:
      tags:
        - Roles Managment
      operationId: getAllRoles
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /role/{roleId}:
    get:
      tags:
        - Roles Managment
      operationId: getRoleById
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /getSensorValues:
    get:
      tags:
        - Real System Service
      operationId: getSensorValues
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /getDomainModel:
    get:
      tags:
        - Domain Model Service
      operationId: getDomainModel
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /getAllOrders:
    get:
      tags:
        - MAS Service
      operationId: getAllOrders
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /getAlgorithms:
    get:
      tags:
        - Algorithms Service
      operationId: getAlgorithms
      parameters:
        - name: AuthToken
          in: header
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "226":
          description: IM Used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /health:
    get:
      summary: Returns the status of the service
      description: This endpoint returns status 200 to notify the Health Checking Service that it's working as intended.
      responses:
        '200':
          description: The response if the service is working as intended.
  /services:
    get:
      tags:
        - service-controller
      operationId: getService
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/SimpleResponse"
    put:
      tags:
        - service-controller
      operationId: updateService
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/service"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/SimpleResponse"
    delete:
      tags:
        - service-controller
      operationId: deleteService
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/service"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/SimpleResponse"
  /registerService:
    post:
      tags:
        - service-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/service"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/SimpleResponse"
  /logs:
    get:
      tags:
        - service-log-controller
      summary: Returns a list of logs.
      description: Returns the logs from the Log Aggregation Service
      parameters:
        - name: startTime
          in: query
          required: false
          description: The start timestamp of the filtering
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: endTime
          in: query
          required: false
          description: The ending timestamp of the filtering
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        '200': # status code
          description: A JSON array of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '500':
          description: An error occurred while retreiving the logs
  /logsByService:
    get:
      tags:
        - service-log-controller
      operationId: getLogsByServiceID
      parameters:
        - name: simpleWrapper
          in: query
          required: true
          schema:
            "$ref": "#/components/schemas/SimpleWrapper"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/SimpleResponse"
  /logsByServiceTimestamp:
    get:
      tags:
        - service-log-controller
      operationId: getLogsByServiceTimestamp
      parameters:
        - name: simpleWrapper
          in: query
          required: true
          schema:
            "$ref": "#/components/schemas/SimpleWrapper"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/SimpleResponse"
components:
  schemas:
    LogType:
      type: string
      enum:
        - INFORMATION
        - WARNING
        - FATAL
        - DEBUG
        - OTHER
    OperationType:
      type: string
      enum:
        - CREATE
        - UPDATE
        - DELETE
        - READ
        - OTHER
    Log:
      type: object
      required:
        - logType
        - operationType
      properties:
        logType:
          $ref: '#/components/schemas/LogType'
        operationType:
          $ref: '#/components/schemas/OperationType'
        message:
          type: string
    SimpleResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    VisualizationRequest:
      type: object
      properties:
        id:
          type: number
    UserRegisterRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        roleId:
          type: integer
          format: int64
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserFromTokenRequest:
      type: object
      properties:
        token:
          type: string
    OrderRequest:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    UserRoleChangeRequest:
      type: object
      properties:
        email:
          type: string
        roleId:
          type: integer
          format: int64
    service:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        ip:
          type: string
        port:
          type: string
        logs:
          type: array
          items:
            "$ref": "#/components/schemas/serviceLog"
    serviceLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
    SimpleWrapper:
      type: object
      properties:
        initialTimestamp:
          type: string
          format: date-time
        endTimestamp:
          type: string
          format: date-time
        ser:
          "$ref": "#/components/schemas/service"
        serLog:
          "$ref": "#/components/schemas/serviceLog"
